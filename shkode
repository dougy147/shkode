#!/usr/bin/env perl
use strict;
use warnings;

# Usage:
# ./shkode <file_to_stream>
#
# The file to stream must be sent to a
# publicly accessible server. For now, I
# take the risk of providing my own <|:^)
# and you take the risk of using it too.

sub main {
    my @args = @_;
    my (@files, @opts);
    parse_args(\@files,\@opts,@args);
    foreach my $file (@files) {
	serve($file, @opts); # should allow subprocesses here
    };
}

sub serve {
    my ($file) = shift;
    my (@opts) = @_;

    # should run this in a thread
    # and wait for a stop signal
    use MIME::Base64; # code base64 encoding
    use URI::Escape;  # escape uri for curl

    my $host = 'shkode.nopub.club';

    ## To replace "curl" call...
    #use IO::Socket::INET; # get request
    #my $port = 443;
    #my $socket = IO::Socket::INET->new(
    #    PeerAddr => $host,
    #    PeerPort => $port,
    #    Proto    => 'tcp'
    #) or die "[ERROR] Cannot create socket: $!\n";

    my $pin = generate_pin();
    print "[INFO] Serving \"$file\" to \"$pin\".\n";
    print "[INFO] Access live code here: https://$host/@/$pin/\n";
    while (1) {
	open(my $_in, "<:encoding(UTF-8)", $file);
	my $code = do { local $/; <$_in> };
	close $_in;

	my $encoded = uri_escape(encode_base64($code,''));
	## To replace "curl" call...
	#my $request = "GET /index.php?page=$pin&code=$encoded HTTP/1.0\r\n" .
	#              "Host: $host\r\n" .
	#	      "Connection: close\r\n\r\n";
	#print $socket $request; # send request
	system("curl -s \"https://$host\" -G -d \"page=$pin\" -d \"code=$encoded\" >/dev/null");
	print "";
	sleep 5;
    }
    ## To replace "curl" call...
    #close($socket);
}

sub generate_pin {
    my $length = 15;
    my @chars = ('A'..'Z', 'a'..'z', '0'..'9');
    my $pin = '';
    $pin .= $chars[rand @chars] for 1..$length;
    return $pin;
}

sub parse_args {
    if (scalar @_ == 0 ) { usage(1, "Missing arguments") };
    my ($files,$opts) = ($_[0],$_[1]);
			 shift; shift;
    my (@args) = @_;
    foreach (@args) {
	if (-e $_ ) { push @$files, $_ }
	else { push @$opts, $_ };
    };
}

sub usage {
    my ($_exit, $msg) = @_;
    defined $_exit or $_exit = 0;
    defined $msg and print "[ERROR] $msg.\n";
    print "Usage: ./shkode <file> [opts]\n";
    exit $_exit;
}

main @ARGV;
